// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: io/unmango/v1alpha1/parser.proto

package unmangov1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/unstoppablemango/lang/pkg/io/unmango/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ParserServiceName is the fully-qualified name of the ParserService service.
	ParserServiceName = "io.unmango.v1alpha1.ParserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ParserServiceParseProcedure is the fully-qualified name of the ParserService's Parse RPC.
	ParserServiceParseProcedure = "/io.unmango.v1alpha1.ParserService/Parse"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	parserServiceServiceDescriptor     = v1alpha1.File_io_unmango_v1alpha1_parser_proto.Services().ByName("ParserService")
	parserServiceParseMethodDescriptor = parserServiceServiceDescriptor.Methods().ByName("Parse")
)

// ParserServiceClient is a client for the io.unmango.v1alpha1.ParserService service.
type ParserServiceClient interface {
	Parse(context.Context, *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error)
}

// NewParserServiceClient constructs a client for the io.unmango.v1alpha1.ParserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewParserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ParserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &parserServiceClient{
		parse: connect.NewClient[v1alpha1.ParseRequest, v1alpha1.ParseResponse](
			httpClient,
			baseURL+ParserServiceParseProcedure,
			connect.WithSchema(parserServiceParseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// parserServiceClient implements ParserServiceClient.
type parserServiceClient struct {
	parse *connect.Client[v1alpha1.ParseRequest, v1alpha1.ParseResponse]
}

// Parse calls io.unmango.v1alpha1.ParserService.Parse.
func (c *parserServiceClient) Parse(ctx context.Context, req *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error) {
	return c.parse.CallUnary(ctx, req)
}

// ParserServiceHandler is an implementation of the io.unmango.v1alpha1.ParserService service.
type ParserServiceHandler interface {
	Parse(context.Context, *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error)
}

// NewParserServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewParserServiceHandler(svc ParserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	parserServiceParseHandler := connect.NewUnaryHandler(
		ParserServiceParseProcedure,
		svc.Parse,
		connect.WithSchema(parserServiceParseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/io.unmango.v1alpha1.ParserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ParserServiceParseProcedure:
			parserServiceParseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedParserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedParserServiceHandler struct{}

func (UnimplementedParserServiceHandler) Parse(context.Context, *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.unmango.v1alpha1.ParserService.Parse is not implemented"))
}
